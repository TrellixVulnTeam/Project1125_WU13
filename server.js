//parts of code for file upload are modified from source: https://code.msdn.microsoft.com/Upload-Files-Or-To-Server-15f69aaa
/*eslint linebreak-style: ["error", "windows"]*/

var Express = require('express');
var app = Express();                // handle http posts
var server = require('http').createServer(app); // http server
var io = require('socket.io')(server);  // handle bi-directional communications
var multer = require('multer');     // handle file uploads to server
var bodyParser = require('body-parser'); // handle http post data
var filesys = require('fs');        // use fs to clear files from directory
var config = require('./config.js');// store AWS config
var AWS = require('aws-sdk');       // for AWS S3 and Rekognition APIs
var ffmpeg = require('ffmpeg');     // extract frames from video
var chokidar = require('chokidar'); // watch out for new video files generated by live video
var debounce = require('debounce'); // prevent processes from executing in quick succession

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({
    extended: true
  }));

var FaceMatches = 0;
var CarMatches =0;
var carplates = [];
var s3 = require('s3');
var VideoSampleRate = 1;
AWS.config.region = config.region;

var paramsFaceMatch = { // parameters for synchronization of S3 storage with local directory
    localDir: './savedframes/',
    deleteRemoved: true, // default false, whether to remove s3 objects that have no corresponding local file. 
    Bucket: 'imgframes2',
    ACL: 'public-read-write',
    MaxKeys: 20,
    s3Params: {
        Bucket: 'imgframes2',
        Prefix: '',  // See: http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#putObject-property 
    },
};
var paramsFaceInit = { // parameters for synchronization of S3 storage with local directory
    localDir: './UploadedFaces/',
    deleteRemoved: true, // default false, whether to remove s3 objects that have no corresponding local file. 
    Bucket: 'faceinit',
    ACL: 'public-read-write',
    MaxKeys: 20,
    s3Params: {
        Bucket: 'faceinit',
        Prefix: '',  // See: http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#putObject-property 
    },
};
var client = s3.createClient({ // defaults for S3 storage synchronization
    maxAsyncS3: 50,     // this is the default 
    s3RetryCount: 3,    // this is the default 
    s3RetryDelay: 1000, // this is the default 
    multipartUploadThreshold: 20971520, // this is the default (20 MB) 
    multipartUploadSize: 15728640, // this is the default (15 MB) 
});

app.get('/', function (req, res) {
    res.sendFile(__dirname + '/index.html');
});

var upload = multer({ dest: 'uploads/' });
// API uses Multer to handle videos uploaded from browser. Uploaded files stored in /uploades directory
app.post('/api/Upload', upload.array('file[]', 3), function (req, res) {
    console.log('1. File received in server'); 
    console.log("Sample rate: " +req.body.SamplingRate); 
    VideoSampleRate = req.body.SamplingRate;
    io.emit('progressL1', '1/6: File received on server');
    io.emit('progressL2', 'Performing ' +req.body.type);
    console.log(req.files[0]); // req.files is array of `photos` files 
    var path = req.files[0].path;
    res.redirect('localhost:2000/index.html');

    if (req.body.type == 'face recognition'){
        ExtractFrames(path)
        .then(UploadImagestoS3)
        .then(RetrieveImagesFromS3)
        .then(AnalyzeFaceImage)
        .then(ClearMedia)
        .catch(function (e) {
            console.log (e);
        });
    }
    else if (req.body.type == 'car plate recognition'){
        ExtractFrames(path)
        .then(UploadImagestoS3)
        .then(RetrieveImagesFromS3)
        .then(AnalyzeCarImage)
        .then(ClearMedia)
        .catch(function (e) {
            console.log (e);
        });
    }
});

// API to handle live videos. Uses Chokidar to look out for video snapshots saved every 30s (settings in Wowza server)
// Alter Chokidar watch directory based on where files are saved (Wowza streaming engine settings)
app.post('/api/Live', function (req, res) {
    console.log('1. Inside API Live'); 
    VideoSampleRate = req.body.SamplingRate;
    io.emit('progressL1', '1. Reading live video');
    res.redirect('localhost:2000/index.html');
    var currpath='';
    //var watcher = chokidar.watch('/usr/local/WowzaStreamingEngine-4.7.1/content/', {    
    var watcher = chokidar.watch('/Library/WowzaStreamingEngine-4.7.1/content/', {
        ignored: /(^|[\/\\])\../, persistent: true, ignoreInitial: true, 
    });
    var log = console.log.bind(console);

    watcher
    .on('add', function(path) { 
        log('File', path, 'has been added'); 
        if (path.slice (-10) != currpath.slice(-10) ) {
            if (path.slice(-3)!='tmp'){
                if (currpath != ''){
                    debounce (ProcessVid(currpath),500); // deal with multiple file added events that happen in quick succession (due to low level events)
                }                                        // ensure processvid is not repeated within 500ms.
                currpath = path; 
            }
        } 
    });

    var ProcessVid = function (path) {
        console.log ('in processvid');       
        if (req.body.typeB == 'face recognition'){
            io.emit('progressL2', 'Face recognition selected');
            ExtractFrames(path)
            .then(UploadImagestoS3)
            .then(RetrieveImagesFromS3)
            .then(AnalyzeFaceImage)
            .then(ClearMedia)
            .catch(function (e) {
                console.log (e);
            });
        }
        else if (req.body.typeB == 'car plate recognition'){
            io.emit('progressL2', 'Car plate recognition selected');
            ExtractFrames(path)
            .then(UploadImagestoS3)
            .then(RetrieveImagesFromS3)
            .then(AnalyzeCarImage)
            .then(ClearMedia)
            .catch(function (e) {
                console.log (e);
            });
        }
    };
});

// API to reset results and clear files from storage
app.post('/api/ClearFiles', function (req, res) {
    console.log('Clear Files'); 
    res.redirect('localhost:2000/index.html');
    CarMatches =0;
    FaceMatches=0;
    ClearMedia();
});

// API to update car plates of interest
app.post('/api/UpdateCarPlates', function (req, res) {
    carplates = req.body.carplates;
    console.log(carplates);
    res.redirect('localhost:2000/index.html');
    io.emit('progressL1', 'Car plate numbers of interest updated: '+carplates);
    //indexFaces()
});

// Init server-side storage for uploaded faces of interest
var storage = multer.diskStorage({
    destination: function (req, file, cb) {
      cb(null, 'UploadedFaces/')
    },
    filename: function (req, file, cb) {
        cb( null, file.originalname );
      }
})
var path = require('path')
var upload = multer({ storage: storage });

//API to handle uploaded faces of interest
app.post('/api/AddFaces',upload.array('file[]', 30), function (req, res) {
    console.log('1. Face images received in server'); 
    io.emit('progressL1', 'Updating Face Collection');
    io.emit('progressL2', '- Face images received in server');
    console.log(req.files); // req.files is array of `photos` files 
    var path = req.files[0].path;
    res.redirect('localhost:2000/index.html');

    createCollection();
    indexFaces();
    UploadFaceInittoS3()
    .then (ListFaceInit)

});

// API to clear Face Collection
app.post('/api/DeleteCollection', function (req, res) {
    res.redirect('localhost:2000/index.html');
    io.emit('progressL1', 'Deleting Face Collection');
    console.log('Del Face Collection'); 
    deleteCollection();
});

// Init IO socket
io.on('connection', function(socket){
    socket.on('CarPlates', function(msg){
        console.log(msg);
    });
  });

  // Init server to listen to port 2000
server.listen(2000, function(){
    console.log('Server listening on port 2000:');
});

// Function to extract video input into picture frames using ffmpeg. Need to have ffmpeg install on computer
var ExtractFrames = function(path) {
    return new Promise(function(resolve, reject) {
        try {
            console.log ('Extractframes path: ' +path);
            var process = new ffmpeg(path);
            process.then(function (video) {
                console.log('2. Extracting frames from video .... ');
                io.emit('progressL1', '2/6: Extracting frames from video ....');
                video.fnExtractFrameToJPG('./savedframes/', {
                    frame_rate	: VideoSampleRate,
                    file_name : 'my_frame_%t_%s'
                }, function (error, files) {
                    if (!error){
                        console.log('Total number of frames generated: ' + files.length);
                        io.emit('progressL2', files.length + " frames generated");
                        resolve(files);
                    }   
                });
            }, function (err) {
                console.log('Error: ' + err);
                reject ('Error extracting files');
            });
        } catch (e) {
            console.log(e.code);
            console.log(e.msg);
        }   
    });
};

// Upload images to AWS S3 storage
var UploadImagestoS3 = function() {
    return new Promise(function(resolve, reject) {
        console.log('3. Uploading frame images to S3 Storage ... ');
        io.emit('progressL1', '3/6: Uploading frame images to S3 Storage ...');
        var uploader = client.uploadDir(paramsFaceMatch);
        uploader.on('error', function(err) {
            console.error('unable to sync:', err.stack);
            reject(err);
        });
        uploader.on('progress', function() {
            //console.log('progress', uploader.progressMd5Amount,uploader.progressAmount, uploader.progressTotal);
            io.emit('progressL2', 'Upload status: '+uploader.progressAmount + ' / ' + uploader.progressTotal +' bytes');
        });
        uploader.on('end', function() {
            console.log('Uploading to S3 Storage complete');
            io.emit('progressL2', 'Uploading to S3 Storage complete')
            resolve('Uploading to S3 Storage completed');
            //resolve(uploadedfiles);
            //resolve("Frames uploaded");
        });   
    });
};

// Retrieve imafes from S3 images 
var RetrieveImagesFromS3 = function() {
    return new Promise(function(resolve, reject) {
        console.log('4. Retrieve images from AWS Storage'); 
        io.emit('progressL1', '4/6: Retrieve images from AWS Storage ...');
        var param = {
            Bucket: 'imgframes2'    
        };
        var s3 = new AWS.S3();
        var allKeys = [];
        var i=0;

        setTimeout(function(){
            s3.listObjectsV2(param, function (err, data) {
                console.log('data: ' +data);
                if (err) {
                    console.log(err, err.stack); // an error occurred
                    reject(err);
                } else {
                    var contents = data.Contents;
                    console.log('Image frames retrieved from S3: ' +contents.length);
                    io.emit('progressL2', +contents.length + ' frames retrieved from S3 storage');
                    contents.forEach(function (content) {
                        allKeys.push(content.Key);
                        i++;
                    });
                    if (i>=contents.length){
                        resolve(allKeys);
                    }       
                }
            });
        }, 5000);
    });
};

// send images to AWS Rekognition for analysis
var AnalyzeFaceImage = function(keys) {
    return new Promise(function(resolve, reject) {
        app.use(Express.static('public'));
        var rekognition = new AWS.Rekognition({region: config.region});
        console.log('5. Sending ' + keys.length + ' images to AWS for Facial Recognition'); 
        io.emit('progressL1', '5/6: Sending images to AWS for Facial Recognition ...');
        var img_name;
        var API_Returns =0;
        function SearchFaces (key) {
            img_name = key;
            var s3Bucket = new AWS.S3();
            var urlParams = {Bucket: 'imgframes2', Key: img_name};
            var img_url;
            s3Bucket.getSignedUrl('getObject', urlParams, function(err, url){
                img_url = url;
                //console.log('the url of the image is: ' +img_url);
            });
            if (img_name == '.DS_Store') {
                API_Returns++;
                return;
            }
            console.log('Image under analysis: ' +img_name);
            io.emit('progressL2', 'Image under analysis: ' +img_name);
            rekognition.searchFacesByImage({
                'CollectionId': config.collectionName,
                'FaceMatchThreshold': 70,
                'Image': { 
                // "Bytes": bitmap,
                    'S3Object':{
                        'Bucket':'imgframes2',
                        'Name': img_name
                    }
                },'MaxFaces': 3
            }, function(err, data) {
                API_Returns++;
                if (err) {
                    //console.log('Error: ' +err);
                } else {
                    if(data.FaceMatches && data.FaceMatches.length > 0 && data.FaceMatches[0].Face){
                        FaceMatches++;
                        var facematch = {
                            SN: FaceMatches,
                            ExtName:0,
                            Similarity:0,
                            Confidence:0,
                            link: img_url,
                            S3_img_name: img_name,
                        };
                        facematch['ExtName'] = data.FaceMatches[0].Face.ExternalImageId;
                        facematch['Confidence'] = data.FaceMatches[0].Face.Confidence;
                        facematch['link'] =img_url;
                        facematch['Similarity'] =data.FaceMatches[0].Similarity;
                        console.log (data.FaceMatches[0]);	
                        console.log (facematch.link);	
                        io.emit('progressL1', '6/6: Face Match found!');
                        io.emit('facematch', facematch);
                        
                        //response.send(data.FaceMatches[0].Face);
                        //resolve("Facematch found!");
                    } else {
                        //resolve("No matching faces found");
                    }
                    console.log('API results returned:' +API_Returns);
                }
                if (API_Returns >= keys.length) {
                    console.log('Analysis results returned:' +API_Returns);
                    console.log ('Analysis Complete. ' + FaceMatches +' face match(es) found.');	
                    io.emit('progressL1', '6/6: Analysis Complete. ' + FaceMatches +' face match(es) found.');
                    resolve();
                }
            }); 
        }
        keys.forEach(function(e) {
            setTimeout(function(){
                SearchFaces(e);
            }, 500);  
        });
        console.log('APIs sent:' +keys.length);
        
    });
};

// Sending images to Google cloud vision for analysis
var AnalyzeCarImage = function(keys) {
    return new Promise(function(resolve, reject) {
        var vision = require('@google-cloud/vision');
        var visionClient = vision({
            projectId: 'essential-asset-165501',
            keyFilename: 'mykey.json'
        });
        
        console.log('5. Sending ' + keys.length + ' images to Google for Image Recognition'); 
        io.emit('progressL1', '5/6: Sending images to Google for Image Recognition ...');
        var img_name;
        var API_Returns =0;
        function SearchCarPlate (key) {
            img_name = key;
            
            var s3Bucket = new AWS.S3();
            var urlParams = {Bucket: 'imgframes2', Key: img_name};
            var img_url;
            s3Bucket.getSignedUrl('getObject', urlParams, function(err, url){
                img_url = url;
                //console.log('the url of the image is: ' +img_url);
            });
            if (img_name == '.DS_Store') {
                API_Returns++;
                return;
            }
            // Prepare the request object
            var uri = 'https://s3.amazonaws.com/imgframes2/'+img_name;
            var request = {
              source: {
                imageUri: uri
              }
            };
            var request = { source: { filename: "./savedframes/" +key } };

            console.log('Image under analysis: ' +img_name);
            io.emit('progressL2', 'Image under analysis: ' +img_name);
            visionClient.textDetection(request).then(response => {
                //console.log(response);
                API_Returns++;
                if (!response[0].fullTextAnnotation.text.length) {return;}
                var words = response[0].fullTextAnnotation.text;
                //var target = carplates[0];
                carplates.forEach(function (target){
                    console.log('target: '+target);   
                    if (words.includes(target) ) {
                        console.log('--> car plate found!!!');   
                        var carmatch = {
                            SN: 0,
                            words:'',
                            link: '',
                            target:target
                        };
                        CarMatches++;
                        carmatch['link'] = uri;
                        carmatch['SN'] = CarMatches;
                        carmatch['words'] = words;
                        io.emit('progressL2', 'Car Plate Match found! ' +CarMatches);
                        io.emit('carmatch', carmatch);
                    }
                })
                
                if (API_Returns >= keys.length) {
                    console.log('Car Plate analysis results returned:' +API_Returns);
                    console.log ('Analysis Complete. ' + CarMatches +' car plate match(es) found.');	
                    io.emit('progressL1', '6/6: Analysis Complete. ' + CarMatches +' car plate match(es) found.');
                    resolve();
                }
            }).catch(err => {
                console.error(err);
                API_Returns++;
            });
        }
        keys.forEach(function(e) {
            setTimeout(function(){
                SearchCarPlate(e);
            }, 500);  
        });
        console.log('APIs sent:' +keys.length);
    });
};

// Clear files from S3 storage and local file directory
var ClearMedia = function() {
    return new Promise(function(resolve, reject) {
        console.log ('Clearing Media');	
        setTimeout(remove, 1500);
        function remove() {
            var rmDir = function(dirPath, removeSelf) {
                if (removeSelf === undefined)
                    removeSelf = true;
                try { var files = filesys.readdirSync(dirPath); }
                catch(e) { return; }
                if (files.length > 0)
                    for (var i = 0; i < files.length; i++) {
                        var filePath = dirPath + '/' + files[i];
                        if (filesys.statSync(filePath).isFile()){
                            filesys.unlinkSync(filePath);
                            io.emit('progressL2', 'Clearing file: '+files[i]);	
                        }
                        else
                      rmDir(filePath);
                    }
                if (removeSelf)
                    filesys.rmdirSync(dirPath);
            };
            rmDir('./savedframes/', false);
            rmDir('./uploads/', false);
    
            var ClearDir = client.deleteDir(paramsFaceMatch);
            ClearDir.on('error', function(err) {
                console.error('unable to clear directory:', err.stack);
                reject(err);
            });
            ClearDir.on('progress', function() {
                console.log('progress', ClearDir.progressAmount, ClearDir.progressTotal);
                io.emit('progressL2', 'Clear S3 Directory'+ClearDir.progressAmount + ' / ' + ClearDir.progressTotal +' bytes');
            });
            ClearDir.on('end', function() {
                console.log('Clear S3 Storage complete');
                resolve('Clear S3 Storage completed');
                io.emit('progressL2', 'S3 Directory cleared');
                io.emit('progressL2', '- Analysis Completed and cache files cleared');
            }); 
        }
    });
};

// delete face collection from AWS List
var rekognition = new AWS.Rekognition({region: config.region});
function deleteCollection() {
    // Index a dir of faces
    
	rekognition.deleteCollection( { "CollectionId": config.collectionName}, function(err, data) {
	  if (err) {
		console.log(err, err.stack); // an error occurred
	  } else {
        console.log(data);           // successful response
        console.log("Collection Deleted");           // successful response
        io.emit('progressL2', '- Face Collection Deleted');
	  }
    });
    var s3 = new AWS.S3();
        var params = {
            Bucket: "faceinit", 
            MaxKeys: 50
           };
        console.log("Clearing Bucket");
        s3.listObjects(params, function (err, data) {
            if (err) {
                console.log("error listing bucket objects "+err);
                return;
            }
            var items = data.Contents;
            console.log(items);
            for (var i = 0; i < items.length; i += 1) {
                var deleteParams = {Bucket: "faceinit", Key: items[i].Key};
                s3.deleteObject(deleteParams, function(err, data) {
                    if (err) console.log(err, err.stack); // an error occurred
                    else {}             // successful response
                });
            }
            console.log("InitFaces Collection Cleared");
        });
    
        setTimeout(remove, 1500);
        function remove() {
            var rmDir = function(dirPath, removeSelf) {
                if (removeSelf === undefined)
                    removeSelf = true;
                try { var files = filesys.readdirSync(dirPath); }
                catch(e) { return; }
                if (files.length > 0)
                    for (var i = 0; i < files.length; i++) {
                        var filePath = dirPath + '/' + files[i];
                        if (filesys.statSync(filePath).isFile()){
                            filesys.unlinkSync(filePath);
                            io.emit('progressL2', 'Clearing file: '+files[i]);	
                        }
                        else
                      rmDir(filePath);
                    }
                if (removeSelf)
                    filesys.rmdirSync(dirPath);
            };
            rmDir('./UploadedFaces/', false);
        }
}

// Create Face collection for AWS Rekognition
function createCollection() {
	// Index a dir of faces
	rekognition.createCollection( { "CollectionId": config.collectionName }, function(err, data) {
	  if (err) {
		//console.log(err, err.stack); // an error occurred
	  } else {
        //console.log(data);           // successful response
        io.emit('progressL2', '- Creating Collection');
        console.log("Collectin name created: " +config.collectionName);
	  }
	});
}

// index faces of interest. Uses KlawSync to synchronize files uploaded in server with S3
function indexFaces() {
	var klawSync = require('klaw-sync')
    var paths = klawSync('./UploadedFaces', { nodir: true, ignore: [ "*.json" ] });
    var fs = require('fs-extra');
    io.emit('progressL1', '2: Index Faces');
	paths.forEach((file) => {
        if (file.path.slice(-4) != 'json' & file.path.slice(-9) != '.DS_Store') {
            console.log("File path: "+file.path);
            var p = path.parse(file.path);
            var name = p.name.replace(/\W/g, '');
            var bitmap = fs.readFileSync(file.path);
    
            rekognition.indexFaces({
               "CollectionId": config.collectionName,
               "DetectionAttributes": [ "ALL" ],
               "ExternalImageId": name,
               "Image": { 
                  "Bytes": bitmap
               }
            }, function(err, data) {
                if (err) {
                    console.log(err, err.stack); // an error occurred
                } else {
                    console.log(data);           // successful response
                    io.emit('progressL2', '- Index Faces Completed');
                    fs.writeJson(file.path + ".json", data, err => {
                        if (err) return console.error(err)
                    });
                }
            })
        }
	});
}

// Upload Face init info to S3 cloud storage
var UploadFaceInittoS3 = function() {
    return new Promise(function(resolve, reject) {
        console.log('3. Uploading face init images to S3 Storage ... ');
        io.emit('progressL1', 'Uploading face init images to S3 Storage ...');
        var uploader = client.uploadDir(paramsFaceInit);
        uploader.on('error', function(err) {
            console.error('unable to sync:', err.stack);
            reject(err);
        });
        uploader.on('progress', function() {
            //console.log('progress', uploader.progressMd5Amount,uploader.progressAmount, uploader.progressTotal);
            io.emit('progressL2', 'Upload status: '+uploader.progressAmount + ' / ' + uploader.progressTotal +' bytes');
        });
        uploader.on('end', function() {
            console.log('Uploading to S3 Storage complete');
            io.emit('progressL2', 'Uploading to S3 Storage complete')
            resolve('Uploading to S3 Storage completed');
            //resolve(uploadedfiles);
            //resolve("Frames uploaded");
        });   
    });
};

// List faces in Face collection
var ListFaceInit = function () {
    var s3 = new AWS.S3({apiVersion: '2006-03-01'});
    var params = {
        Bucket: "faceinit", 
        MaxKeys: 20
       };
       s3.listObjects(params, function(err, data) {
         if (err) console.log(err, err.stack); // an error occurred
         else   {
            console.log(data);           // successful response
            //console.log(data.Contents[0].Key); 
            io.emit('delfaceinit', '');
            data.Contents.forEach (function (element) {
                if (element.Key.slice(-4) == 'jpeg' || element.Key.slice(-3) == 'png'|| element.Key.slice(-3) == 'jpg') {
                    console.log (element.Key);
                    io.emit('faceinit', 'https://s3.amazonaws.com/faceinit/'+element.Key); 
                }
            })

         }  
       });
}